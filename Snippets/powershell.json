{
    "Pester fuer Parameter": {
        "prefix": "Pester Parameter",
        "body": [
            "It \"Cmdlet ${1:FunctionName} sollte diesen Parameter haben ${2:ParameterName}\" {",
            "\t(Get-Command ${1:FunctionName}).Parameters['${2:ParameterName}'].Count | Should -Be 1",
            "}"
        ],
        "description": "Pester Test fuer Parameter"
    },
    "Pester Kompletter Aufbau": {
        "prefix": "Pester Aufbau",
        "body": [
            "Describe 'Die Beschreibung eines Testfalls' {",
            "\tcontext 'Erster Kontext des Tests'{",
            "\t\tIT 'Erster Test mit Beschreibung'{",
            "\t\t\t $true | should -BeTrue # Erster Testlauf sollte $true sein",
            "\t\t} -Tag 'Test1'",
            "\t} -Tag 'Kontext1'",
            "} -Tag 'Testfall1'"
        ],
        "description": "Pester Aufbau mit Describe, Kontext und IT"
    },
    "Pester fuer Datei existiert": {
        "prefix": "Pester Datei existiert",
        "body": [
            "It \"Datei ${1:Pfad} sollte vorhanden sein\" {",
            "\t'${1:Pfad}' | Should -Exist",
            "}"
        ],
        "description": "Pester Test Datei existiert"
    },
    "PSCustomObject": {
        "prefix": "PSCustomObject Geruest",
        "body": [
            "[PSCustomObject]@{",
            "\t${1:Name} = ${2:Value}",
            "}"
        ],
        "description": "Erstellt ein Geruest fuer ein PSCustomObject"
    },
    "Assembly": {
        "prefix": "Assembly Laden",
        "body": [
            "# Laden der Assembly aus einer DLL Datei",
            "\t[System.Reflection.Assembly]::LoadFile(${1:DateiName})",
            "\tAdd-Type -Path ${1:DateiName}"
        ],
        "description": "Assembly aus einer Datei (DLL) laden"
    }
}